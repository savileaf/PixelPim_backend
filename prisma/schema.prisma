generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  fullname        String?
  password        String?
  googleId        String?          @unique
  provider        String           @default("local")
  createdAt       DateTime         @default(now())
  attributes      Attribute[]      @relation("UserAttributes")
  attributeGroups AttributeGroup[] @relation("UserAttributeGroups")
  families        Family[]         @relation("UserFamilies")
  categories      Category[]       @relation("UserCategories")
  products        Product[]        @relation("UserProducts")
  assets          Asset[]          @relation("UserAssets")
  assetGroups     AssetGroup[]     @relation("UserAssetGroups")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  type      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, type])
}

model Attribute {
  id               Int                       @id @default(autoincrement())
  name             String                    @unique
  type             String
  defaultValue     String?
  userId           Int
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  user             User                      @relation("UserAttributes", fields: [userId], references: [id], onDelete: Cascade)
  attributeGroups  AttributeGroupAttribute[]
  familyAttributes FamilyAttribute[]
  products         Product[]                 @relation("ProductAttributes")
}

model AttributeGroup {
  id          Int                       @id @default(autoincrement())
  name        String                    @unique
  description String?
  userId      Int
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  user        User                      @relation("UserAttributeGroups", fields: [userId], references: [id], onDelete: Cascade)
  attributes  AttributeGroupAttribute[]
  products    Product[]                 @relation("ProductAttributeGroups")
}

model AttributeGroupAttribute {
  id               Int            @id @default(autoincrement())
  attributeId      Int
  attributeGroupId Int
  required         Boolean        @default(false)
  defaultValue     String?
  createdAt        DateTime       @default(now())
  attributeGroup   AttributeGroup @relation(fields: [attributeGroupId], references: [id], onDelete: Cascade)
  attribute        Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([attributeId, attributeGroupId])
}

model Family {
  id               Int               @id @default(autoincrement())
  name             String
  userId           Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation("UserFamilies", fields: [userId], references: [id], onDelete: Cascade)
  familyAttributes FamilyAttribute[]
  products         Product[]         @relation("ProductFamilies")

  @@unique([name, userId])
}

model FamilyAttribute {
  id              Int       @id @default(autoincrement())
  familyId        Int
  attributeId     Int
  isRequired      Boolean   @default(false)
  additionalValue String?
  createdAt       DateTime  @default(now())
  attribute       Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  family          Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, attributeId])
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  description      String?
  parentCategoryId Int?
  userId           Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  parentCategory   Category?  @relation("CategoryParent", fields: [parentCategoryId], references: [id])
  subcategories    Category[] @relation("CategoryParent")
  user             User       @relation("UserCategories", fields: [userId], references: [id], onDelete: Cascade)
  products         Product[]  @relation("CategoryProducts")

  @@unique([name, userId])
}

model Product {
  id               Int             @id @default(autoincrement())
  name             String
  sku              String
  productLink      String?
  imageUrl         String?
  status           String          @default("incomplete") // complete, incomplete
  categoryId       Int?
  attributeId      Int?
  attributeGroupId Int?
  familyId         Int?
  userId           Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  category         Category?       @relation("CategoryProducts", fields: [categoryId], references: [id])
  attribute        Attribute?      @relation("ProductAttributes", fields: [attributeId], references: [id])
  attributeGroup   AttributeGroup? @relation("ProductAttributeGroups", fields: [attributeGroupId], references: [id])
  family           Family?         @relation("ProductFamilies", fields: [familyId], references: [id])
  user             User            @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sku, userId])
  @@unique([name, userId])
}

model AssetGroup {
  id          Int      @id @default(autoincrement())
  groupName   String
  createdDate DateTime @default(now())
  totalSize   BigInt   @default(0) // Size in bytes
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserAssetGroups", fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]  @relation("AssetGroupAssets")

  @@unique([groupName, userId])
}

model Asset {
  id           Int         @id @default(autoincrement())
  name         String
  fileName     String      // Original filename
  filePath     String      // Server file path
  mimeType     String      // File MIME type
  uploadDate   DateTime    @default(now())
  size         BigInt      // File size in bytes
  userId       Int
  assetGroupId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation("UserAssets", fields: [userId], references: [id], onDelete: Cascade)
  assetGroup   AssetGroup? @relation("AssetGroupAssets", fields: [assetGroupId], references: [id], onDelete: SetNull)

  @@unique([name, userId])
}
